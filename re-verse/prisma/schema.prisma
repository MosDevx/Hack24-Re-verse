// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init




generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum TaskType {
	ARTICLE
	VIDEO
	QUIZ
}

enum QuizType {
	MULTIPLE_CHOICE
	TRUE_FALSE
	FILL_IN_THE_BLANK
}

enum CommunityType {
	FAMILY
	FRIENDS
	CHURCH_GROUP
}


enum CommunityStatus {
	ACTIVE
	INACTIVE
	PENDING
}

enum CommunityRole {
	SHEPHERD
	SHEEP
}	

enum CommunityActivityType {
	QUIZ
	MODULE
	VIDEO
}


enum ProgressStatus {
	NOT_STARTED
	IN_PROGRESS
	COMPLETED
}



enum MemorySystem {
	NORMAL
	NAVIGATORS
	USER_FAVOURITE
}
//User Model

////USER MODULE

model User {
	id          Int      @id @default(autoincrement())
	email       String   @unique
	first_name  String
	last_name   String
	username    String 
	date_of_birth   DateTime
	profile_picture_url String
	gender      String?
	role 			String?
	created_At DateTime @default(now())
	updated_At DateTime @updatedAt


  streaks        Streak[]
  streakDateLogs StreakDateLog[]
  stats          Stats?

  communityUserJoins CommunityUserJoin[]
  communityMessages CommunityMessage[]
  communityActivities CommunityActivity[]
  communityActivityMessages communityActivityMessage[]
	communityActivityProgresses CommunityActivityProgress[]
	communityActivityParticipants CommunityActivityParticipants[]


  userVerseMemories UserVerseMemory[]
  userFavouriteVerses UserFavouriteVerse[]

	userTasksProgress UserTaskProgress[]

  journalEntries JournalEntry[]
  journalEntryComments JournalEntryComment[]


	//set up relationship with user
	//one-to-many relationship
	//one user can have many streaks
	

}


model StreakDateLog{
	id          Int      @id @default(autoincrement())
	date        DateTime @default(now())
	userId      Int
	user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Streak {
	id     Int    @id @default(autoincrement())
	current_streak  Int    @default(0)
	longest_streak  Int    @default(0)
	userId Int
	user   User @relation(fields: [userId], references: [id] , onDelete: Cascade)
}


model Stats{
	id          Int      @id @default(autoincrement())
	discipleship_progress Float? @default(0)
	xp Int @default(0)

	userId      Int @unique
	currentModuleId Int? 
	currentLessonId Int?
	currentTaskId Int?

	user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
	//one-to-one rship to module
	module Module? @relation(fields: [currentModuleId], references: [id], onDelete: SetNull)
	//one-to-one lesson	
	lesson Lesson? @relation(fields: [currentLessonId], references: [id], onDelete: SetNull)
	//one-to-one task
	task Task? @relation(fields: [currentTaskId], references: [id], onDelete: SetNull)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

}





//// DISCIPLESHIP MODULE


model Module {
	id          Int      @id @default(autoincrement())
	title       String
	description String
	total_lessons Int
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt

	lessons     Lesson[]
	moduleCommunityActivities ModuleCommunityActivity[]

	stats       Stats[]

}


model Lesson {
	id          Int      @id @default(autoincrement())
	title       String
	lesson_number Int?
	description String
	createdAt   DateTime @default(now())

	moduleId    Int?
	module      Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

	tasks       Task[]
	stats       Stats[]

}


model Task {
	id          Int      @id @default(autoincrement())
	lessonId    Int?
	title 		 String
	taskType  TaskType
	orderPosition Int?
	isMandatory Boolean @default(true)



	articleTask ArticleTask?
	videoTask VideoTask?
	quizTask QuizTask?
	lesson      Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)
	
	createdAt   DateTime @default(now())

	stats       Stats[]
	userTaskProgress UserTaskProgress[]

}


model ArticleTask{
	id          Int      @id @default(autoincrement())
	content     String

	createdAt   DateTime @default(now())

	taskId      Int?  @unique
	task        Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}

model VideoTask{
	id          Int      @id @default(autoincrement())
	video_url   String

	createdAt   DateTime @default(now())

	taskId      Int? @unique
	task        Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}




model QuizTask{
	id          Int      @id @default(autoincrement())

	quizType    QuizType
	quizData Json

	
	createdAt   DateTime @default(now())

	taskId      Int? @unique
	task        Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}

model UserTaskProgress{
	id          Int      @id @default(autoincrement())
	isCompleted Boolean @default(false)

	progressStatus ProgressStatus
	
	completionData Json?
	completionDate DateTime

	userId Int
	user User @relation(fields: [userId], references:[id], onDelete: Cascade)

	
	taskId      Int @unique
	task        Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt


	@@index([userId])
	@@index([taskId])
	@@index([progressStatus])

}

//// COMMUNITY MODULE

model Community {
		id          Int      @id @default(autoincrement())
		name String
		communityType CommunityType
		description String
		image_url String?

		createdAt   DateTime @default(now())
		updatedAt DateTime @updatedAt

		communityUserJoins CommunityUserJoin[]
		communityMessages CommunityMessage[]
		communityActivities CommunityActivity[]
		communityActivityProgresses CommunityActivityProgress[]


}

model CommunityUserJoin{
		id          Int      @id @default(autoincrement())

		userId Int
		communityId Int
		joinedAt DateTime @default(now())
		lastActive DateTime
		status CommunityStatus

		notificationsEnabled Boolean @default(true)
		preferences Json?
		role CommunityRole
		xp Int @default(0)



		user User @relation(fields: [userId], references: [id], onDelete: Cascade)
		community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

		@@unique([userId, communityId])
		updatedAt DateTime @updatedAt


		@@index([userId])
		@@index([communityId])
}


model CommunityMessage{
		id					Int      @id @default(autoincrement())
		content String


		userId Int?
		communityId Int
		createdAt DateTime @default(now())
		updatedAt  DateTime @updatedAt

		user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
		community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

		@@index([communityId])
	  @@index([userId])
}


model CommunityActivity{
		id					Int      @id @default(autoincrement())
		
		title String
		description String
		activityType CommunityActivityType

		startDate DateTime
		endDate DateTime

		createdBy Int?
		user User? @relation(fields: [createdBy], references: [id], onDelete: SetNull)
		
		communityId Int
		community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
					
		updatedAt DateTime @updatedAt
		createdAt DateTime @default(now())


		studyGroupCommunityActivity StudyGroupCommunityActivity?
		quizCommunityActivity QuizCommunityActivity?
		moudleCommunityActivity ModuleCommunityActivity?

		communityActivityParticipants CommunityActivityParticipants[]
		communityActivityMessages communityActivityMessage[]
		communityActivityProgresses CommunityActivityProgress[]
		
		@@index([communityId])

}

model CommunityActivityParticipants{

	id					Int      @id @default(autoincrement())
	userId Int
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	communityActivityId Int
	communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)

	role CommunityRole

	createAt DateTime @default(now())

}


model communityActivityMessage{
		id					Int      @id @default(autoincrement())
		content String

		userId Int?
		communityActivityId Int

		user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
		communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)
		createdAt DateTime @default(now())
		updatedAt DateTime @updatedAt
}
model StudyGroupCommunityActivity{
		id					Int      @id @default(autoincrement())
		schedule DateTime
		topic String?
		venue String?
		resource String?
		hasMilestone Boolean @default(false)

		communityActivityId Int @unique
		communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)
		updatedAt DateTime @updatedAt
		createdAt DateTime @default(now())

		studyMilestone StudyMilestone? 
}

model QuizCommunityActivity{
		id					Int      @id @default(autoincrement())
		quizId Int
		quizType QuizType
		quizData Json
		updatedAt DateTime @updatedAt
		createdAt DateTime @default(now())

		communityActivityId Int @unique
		communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)


}


model ModuleCommunityActivity{
		id					Int      @id @default(autoincrement())
		updatedAt DateTime @updatedAt
		createdAt DateTime @default(now())

		communityActivityId Int @unique
		communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)

		moduleId Int? 
		module Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

}




model StudyMilestone{
		id					Int      @id @default(autoincrement())
		title String
		description String
		createdAt DateTime @default(now())
		updatedAt DateTime @updatedAt
		startDate DateTime?
		endDate DateTime?

		studyGroupCommunityActivityId Int @unique


		studyGroupCommunityActivity StudyGroupCommunityActivity @relation(fields: [studyGroupCommunityActivityId], references: [id], onDelete: Cascade)

		studyMilestoneSections StudyMilestoneSection[]
}


model StudyMilestoneSection{
		id					Int      @id @default(autoincrement())
		title String
		range Json
		description String?
		order_position Int


		createdAt DateTime @default(now())
		updatedAt DateTime @updatedAt

		studyMilestoneId Int
		studyMilestone StudyMilestone @relation(fields: [studyMilestoneId], references: [id], onDelete: Cascade)

}



model CommunityActivityProgress{
		id					Int      @id @default(autoincrement())
		

		userId Int
		user User @relation(fields: [userId], references: [id], onDelete: Cascade)

		communityId Int?
		community Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)

		communityActivityId Int
		communityActivity CommunityActivity @relation(fields: [communityActivityId], references: [id], onDelete: Cascade)

		progressData Json
		progressStatus ProgressStatus

		completedAt DateTime
		progress Float
		isCompleted Boolean @default(false)

		updatedAt DateTime @updatedAt
		createdAt DateTime @default(now())


}






//// VERSE MEMORIZATION MODULE

model UserVerseMemory{
	id          Int      @id @default(autoincrement())


	userId Int
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	verseId Int
	verse Verse @relation(fields: [verseId], references: [id], onDelete: Cascade)

	successRate Float
	nextReviewDate DateTime
	intervalDays DateTime
	lastAttemptDate DateTime
	createdAt DateTime @default(now())
	memorySystem MemorySystem

	@@index([userId])
	@@index([verseId])
	@@index([nextReviewDate])

}


model Verse {
	id          Int      @id @default(autoincrement())
	reference  String
	content     String
	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

	verseTags VerseTagJoin[]
	UserVerseMemory UserVerseMemory[]
	UserFavouriteVerse UserFavouriteVerse[]
	NavigatorVerse NavigatorVerse[]

}

model Tag{
	id          Int      @id @default(autoincrement())
	name String
	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

	verseTags VerseTagJoin[]
	NavigatorVerse NavigatorVerse[]

}

model VerseTagJoin{
	id          Int      @id @default(autoincrement())

	verseId Int
	tagId Int

	verse Verse @relation(fields: [verseId], references: [id], onDelete: Cascade)
	tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model UserFavouriteVerse{

	id          Int      @id @default(autoincrement())

	userId Int
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	verseId Int
	verse Verse @relation(fields: [verseId], references: [id], onDelete: Cascade)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@unique([userId, verseId])
}


model NavigatorTags{
	id          Int      @id @default(autoincrement())

	Title String

	module String @db.Char(1)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

	NavigatorVerse NavigatorVerse[]
}


model NavigatorVerse{

	id          Int      @id @default(autoincrement())


	verseId Int
	verse Verse @relation(fields: [verseId], references: [id], onDelete: Cascade)

	navigatorTagId Int
	navigatorTag NavigatorTags @relation(fields: [navigatorTagId], references: [id], onDelete: Cascade)

	tagId Int?
	tag Tag? @relation(fields: [tagId], references: [id], onDelete: SetNull)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@unique([verseId, navigatorTagId])

}





//// JOURNAL MODULE

model JournalEntry {

	id          Int      @id @default(autoincrement())
	title String
	content String

	references String?

	isPublic Boolean @default(true)

	createdAt   DateTime @default(now())
	updatedAt DateTime @updatedAt
	deleteAt DateTime?

	userId Int?
	user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

	journalEntryComments JournalEntryComment[]

	@@index([userId])
	@@index([isPublic])

}

model JournalEntryComment {

	id					Int      @id @default(autoincrement())
	content String
	userID Int?
	user User? @relation(fields: [userID], references: [id], onDelete: SetNull)
	journalEntryID Int
	journalEntry JournalEntry @relation(fields: [journalEntryID], references: [id], onDelete: Cascade)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deleteAt DateTime?

}
