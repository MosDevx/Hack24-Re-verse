// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  first_name  String
  last_name   String
  created_At  DateTime @default(now())
  dob         DateTime
  profile_pik String?
  gender      String?
  progress    Int?
  trivia_score Int?
  //one-to-one rship to Streak
  streak   Streak?
  streakId Int? //foreign key for streak

  // articles Articles[]   //one-to-many rship to Articles 
  notification Notifications[]
  // trivias Trivias[]

  //One-to-many rship for messages sent and received 
  sentMessages     Messages[] @relation("SentMessages")
  receivedMessages Messages[] @relation("ReceivedMessages")
}

model Articles {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  // author Users @relation(fields: [authorId],references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Lessons {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}

model Streak {
  id     Int    @id @default(autoincrement())
  count  Int    @default(0)
  user   Users? @relation(fields: [userId], references: [id])
  userId Int?   @unique
}

model Messages {
  id      Int      @id @default(autoincrement())
  content String
  sentAt  DateTime @default(now())

  sender   Users @relation("SentMessages", fields: [senderId], references: [id])
  senderId Int

  receiver   Users @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
}

model Trivia {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  type      String
  createdAt DateTime @default(now())

  // One-to-many relationship with Trivia
  choices   Choice[]
}

model Notifications {
  id        Int      @id @default(autoincrement())
  message   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
}

model Course {
  id         Int      @id @default(autoincrement())
  name       String   // Name of the course
  description String? // Description of the course
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // One-to-many relationship with Stage
  stages     Stage[]
}

model Stage {
  id         Int      @id @default(autoincrement())
  name       String   // Name of the stage (e.g. Beginner, Intermediate, Expert)
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  createdAt  DateTime @default(now())

  // One-to-many relationship with Level
  levels     Level[]
}

model Level {
  id         Int      @id @default(autoincrement())
  title      String   // Title of the level
  description String? // Description of the level
  content    String   // Content for the level
  stage      Stage    @relation(fields: [stageId], references: [id])
  stageId    Int
  createdAt  DateTime @default(now())

  // One-to-many relationship with LevelTrivia
  trivias    LevelTrivia[]
}

model LevelTrivia {
  id         Int      @id @default(autoincrement())
  question   String   // Trivia question
  answer     String   // Correct answer
  type       String   // Type of trivia (e.g. Multiple Choice, True or False)
  level      Level    @relation(fields: [levelId], references: [id])
  levelId    Int
  createdAt  DateTime @default(now())

  // One-to-many relationship with Option
  options    Option[]
}

model Option{
  id         Int      @id @default(autoincrement())
  option     String
  levelTrivia LevelTrivia @relation(fields: [levelTriviaId], references: [id])
  levelTriviaId Int
  createdAt  DateTime @default(now())
}

model Choice {
  id         Int      @id @default(autoincrement())
  choice     String
  Trivia Trivia @relation(fields: [TriviaId], references: [id])
  TriviaId Int
  createdAt  DateTime @default(now())
}